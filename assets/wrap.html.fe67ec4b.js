import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as e,d as o,f as n}from"./app.c23862ec.js";const t={},p=n(`<p>\u9664\u4E86\u7C7B\u578B\u5916\uFF0CJavaScript \u8FD8\u63D0\u4F9B\u4E86\u5305\u88C5\u5BF9\u8C61\uFF0C\u719F\u6089 Java \u5C31\u4F1A\u4E86\u89E3 <code>int</code> \u548C <code>Integer</code> \u7684\u5173\u7CFB\u3002</p><p><code>number</code>\u3001<code>boolean</code> \u548C <code>string</code> \u90FD\u6709\u5305\u88C5\u5BF9\u8C61\u3002\u6CA1\u9519\uFF0C\u5728 JavaScript \u4E2D\uFF0C\u5B57\u7B26\u4E32\u4E5F\u533A\u5206 <code>string</code> \u7C7B\u578B\u548C\u5B83\u7684\u5305\u88C5\u7C7B\u578B\u3002\u5305\u88C5\u5BF9\u8C61\u7528 <code>new</code> \u521B\u5EFA:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123,\u751F\u6210\u4E86\u65B0\u7684\u5305\u88C5\u7C7B\u578B</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true,\u751F\u6210\u4E86\u65B0\u7684\u5305\u88C5\u7C7B\u578B</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;str&#39;,\u751F\u6210\u4E86\u65B0\u7684\u5305\u88C5\u7C7B\u578B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),c=n(`<p>\u867D\u7136\u5305\u88C5\u5BF9\u8C61\u770B\u4E0A\u53BB\u548C\u539F\u6765\u7684\u503C\u4E00\u6A21\u4E00\u6837\uFF0C\u663E\u793A\u51FA\u6765\u4E5F\u662F\u4E00\u6A21\u4E00\u6837\uFF0C\u4F46\u4ED6\u4EEC\u7684\u7C7B\u578B\u5DF2\u7ECF\u53D8\u4E3A <code>object</code> \u4E86! \u6240\u4EE5\uFF0C\u5305\u88C5\u5BF9\u8C61\u548C\u539F\u59CB\u503C\u7528 <code>===</code> \u6BD4\u8F83\u4F1A\u8FD4\u56DE <code>false</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6240\u4EE5\u4E0D\u8981\u4F7F\u7528\u5305\u88C5\u5BF9\u8C61! \u5C24\u5176\u662F\u9488\u5BF9 <code>string</code> \u7C7B\u578B!!!</p><p>\u5982\u679C\u6211\u4EEC\u5728\u4F7F\u7528 <code>Number</code>\u3001<code>Boolean</code> \u548C <code>String</code> \u65F6\uFF0C\u6CA1\u6709\u5199 new \u4F1A\u53D1\u751F\u4EC0\u4E48\u60C5\u51B5?</p><p>\u6B64\u65F6\uFF0C<code>Number()</code>\u3001<code>Boolean()</code> \u548C <code>String()</code> \u88AB\u5F53\u505A\u666E\u901A\u51FD\u6570\uFF0C\u628A\u4EFB\u4F55\u7C7B\u578B\u7684\u6570\u636E\u8F6C\u6362\u4E3A <code>number</code>\u3001<code>boolean</code> \u548C <code>string</code> \u7C7B\u578B(\u6CE8\u610F\u4E0D\u662F\u5176\u5305\u88C5\u7C7B\u578B):</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123\uFF0C\u76F8\u5F53\u4E8EparseInt()\u6216parseFloat()</span>
<span class="token keyword">typeof</span> n<span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">typeof</span> b<span class="token punctuation">;</span> <span class="token comment">// &#39;boolean&#39;</span>

<span class="token keyword">const</span> b2 <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true! &#39;false&#39;\u5B57\u7B26\u4E32\u8F6C\u6362\u7ED3\u679C\u4E3Atrue!\u56E0\u4E3A\u5B83\u662F\u975E\u7A7A\u5B57\u7B26\u4E32!</span>
<span class="token keyword">const</span> b3 <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;123.45&#39;</span>
<span class="token keyword">typeof</span> s<span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u603B\u7ED3:</p><ul><li><p>\u4E0D\u8981\u4F7F\u7528 <code>new Number()</code>\u3001<code>new Boolean()</code>\u3001<code>new String()</code> \u521B\u5EFA\u5305\u88C5\u5BF9\u8C61\uFF1B</p></li><li><p>\u7528 <code>parseInt()</code> \u6216 <code>parseFloat()</code> \u6765\u8F6C\u6362\u4EFB\u610F\u7C7B\u578B\u5230 <code>number</code>\uFF1B</p></li><li><p>\u7528 <code>String()</code> \u6765\u8F6C\u6362\u4EFB\u610F\u7C7B\u578B\u5230 <code>string</code>\uFF0C\u6216\u8005\u76F4\u63A5\u8C03\u7528\u67D0\u4E2A\u5BF9\u8C61\u7684 <code>toString()</code> \u65B9\u6CD5\uFF1B</p></li><li><p>\u901A\u5E38\u4E0D\u5FC5\u628A\u4EFB\u610F\u7C7B\u578B\u8F6C\u6362\u4E3A <code>boolean</code> \u518D\u5224\u65AD\uFF0C\u56E0\u4E3A\u53EF\u4EE5\u76F4\u63A5\u5199 <code>if (myVar) {...}</code>\uFF1B</p></li><li><p><code>typeof</code> \u64CD\u4F5C\u7B26\u53EF\u4EE5\u5224\u65AD\u51FA <code>number</code>\u3001<code>boolean</code>\u3001<code>string</code>\u3001<code>function</code> \u548C <code>undefined</code>\uFF1B</p></li><li><p>\u5224\u65AD <code>Array</code> \u8981\u4F7F\u7528 <code>Array.isArray(arr)</code>\uFF1B</p></li><li><p>\u5224\u65AD <code>null</code> \u8BF7\u4F7F\u7528 <code>myVar === null</code>\uFF1B</p></li><li><p>\u5224\u65AD\u67D0\u4E2A\u5168\u5C40\u53D8\u91CF\u662F\u5426\u5B58\u5728\u7528 <code>typeof window.myVar === &#39;undefined&#39;</code>\uFF1B</p></li><li><p>\u51FD\u6570\u5185\u90E8\u5224\u65AD\u67D0\u4E2A\u53D8\u91CF\u662F\u5426\u5B58\u5728\u7528 <code>typeof myVar === &#39;undefined&#39;</code>\u3002</p></li><li><p><code>null</code> \u548C <code>undefined</code> \u6CA1\u6709 <code>toString()</code> \u65B9\u6CD5\uFF0C<code>number</code> \u5BF9\u8C61\u8C03\u7528 <code>toString()</code> \u62A5 <code>SyntaxError</code>\u3002\u867D\u7136 <code>null</code> \u8FD8\u4F2A\u88C5\u6210\u4E86 <code>object</code> \u7C7B\u578B\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">123.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError</span>
<span class="token comment">// \u9047\u5230\u8FD9\u79CD\u60C5\u51B5\uFF0C\u8981\u7279\u6B8A\u5904\u7406\u4E00\u4E0B:</span>

<span class="token number">123.</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;123&#39;, \u6CE8\u610F\u662F\u4E24\u4E2A\u70B9!</span>
<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;123&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,8);function l(i,d){return a(),e("div",null,[p,o(" more "),c])}const k=s(t,[["render",l],["__file","wrap.html.vue"]]);export{k as default};
