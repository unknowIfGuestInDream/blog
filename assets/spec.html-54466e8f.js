const e=JSON.parse('{"key":"v-69a8739a","path":"/en/code/language/js/es6/spec.html","title":"读懂 ECMAScript 规格","lang":"en-US","frontmatter":{"icon":"creative","author":"阮一峰","date":"2019-10-25T00:00:00.000Z","category":["JavaScript"],"copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"读懂 ECMAScript 规格 概述 规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。 一般来说，没有必要阅读规格，除非您要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果您遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。 这对 JavaScript 语言很有必要。因为它的使用场景复杂，语法规则不统一，例外很多，各种运行环境的行为不一致，导致奇怪的语法问题层出不穷，任何语法书都不可能囊括所有情况。查看规格，不失为一种解决语法问题的最可靠、最权威的终极方法。","head":[["meta",{"property":"og:url","content":"https://blog.tlcsdm.com/en/code/language/js/es6/spec.html"}],["meta",{"property":"og:site_name","content":"unknowIfGuestInDream"}],["meta",{"property":"og:title","content":"读懂 ECMAScript 规格"}],["meta",{"property":"og:description","content":"读懂 ECMAScript 规格 概述 规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。 一般来说，没有必要阅读规格，除非您要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果您遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。 这对 JavaScript 语言很有必要。因为它的使用场景复杂，语法规则不统一，例外很多，各种运行环境的行为不一致，导致奇怪的语法问题层出不穷，任何语法书都不可能囊括所有情况。查看规格，不失为一种解决语法问题的最可靠、最权威的终极方法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-10-08T11:40:37.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"ja-JP"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2019-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-08T11:40:37.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://blog.tlcsdm.com/code/language/js/es6/spec.html"}],["link",{"rel":"alternate","hreflang":"ja-jp","href":"https://blog.tlcsdm.com/ja/code/language/js/es6/spec.html"}]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"术语","slug":"术语","link":"#术语","children":[{"level":3,"title":"抽象操作","slug":"抽象操作","link":"#抽象操作","children":[]},{"level":3,"title":"Record 和 field","slug":"record-和-field","link":"#record-和-field","children":[]},{"level":3,"title":"[[Notation]]","slug":"notation","link":"#notation","children":[]},{"level":3,"title":"Completion Record","slug":"completion-record","link":"#completion-record","children":[]}]},{"level":2,"title":"抽象操作的标准流程","slug":"抽象操作的标准流程","link":"#抽象操作的标准流程","children":[]},{"level":2,"title":"相等运算符","slug":"相等运算符","link":"#相等运算符","children":[]},{"level":2,"title":"数组的空位","slug":"数组的空位","link":"#数组的空位","children":[]},{"level":2,"title":"数组的 map 方法","slug":"数组的-map-方法","link":"#数组的-map-方法","children":[]}],"git":{"createdTime":1665229237000,"updatedTime":1665229237000,"contributors":[{"name":"梦里不知身是客","email":"tang97155@gmail.com","commits":1}]},"readingTime":{"minutes":12.45,"words":3734},"localizedDate":"October 25, 2019","filePathRelative":"en/code/language/js/es6/spec.md","excerpt":"<h1> 读懂 ECMAScript 规格</h1>\\n<h2> 概述</h2>\\n<p>规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。</p>\\n<p>一般来说，没有必要阅读规格，除非您要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果您遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。</p>\\n<p>这对 JavaScript 语言很有必要。因为它的使用场景复杂，语法规则不统一，例外很多，各种运行环境的行为不一致，导致奇怪的语法问题层出不穷，任何语法书都不可能囊括所有情况。查看规格，不失为一种解决语法问题的最可靠、最权威的终极方法。</p>","autoDesc":true}');export{e as data};
