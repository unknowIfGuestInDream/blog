const t=JSON.parse(`{"key":"v-3a3c54a6","path":"/ja/code/language/python/oop/property.html","title":"属性","lang":"ja-JP","frontmatter":{"title":"属性","author":"廖雪峰","icon":"state","date":"2021-03-28T00:00:00.000Z","category":["Python"],"description":"私有属性 在 Class 内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。 但是，从前面 Student 类的定义来看，外部代码还是可以自由地修改一个实例的 name、score 属性: &gt;&gt;&gt; bart = Student('Bart Simpson', 59) &gt;&gt;&gt; bart.score 59 &gt;&gt;&gt; bart.score = 99 &gt;&gt;&gt; bart.score 99","head":[["meta",{"property":"og:url","content":"https://blog.tlcsdm.com/ja/code/language/python/oop/property.html"}],["meta",{"property":"og:site_name","content":"unknowIfGuestInDream"}],["meta",{"property":"og:title","content":"属性"}],["meta",{"property":"og:description","content":"私有属性 在 Class 内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。 但是，从前面 Student 类的定义来看，外部代码还是可以自由地修改一个实例的 name、score 属性: &gt;&gt;&gt; bart = Student('Bart Simpson', 59) &gt;&gt;&gt; bart.score 59 &gt;&gt;&gt; bart.score = 99 &gt;&gt;&gt; bart.score 99"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-10-08T11:40:37.000Z"}],["meta",{"property":"og:locale","content":"ja-JP"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:published_time","content":"2021-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-08T11:40:37.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://blog.tlcsdm.com/code/language/python/oop/property.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://blog.tlcsdm.com/en/code/language/python/oop/property.html"}]]},"headers":[{"level":2,"title":"私有属性","slug":"私有属性","link":"#私有属性","children":[]},{"level":2,"title":"__slots__","slug":"slots","link":"#slots","children":[{"level":3,"title":"不受限制的属性","slug":"不受限制的属性","link":"#不受限制的属性","children":[]},{"level":3,"title":"使用 __slots__","slug":"使用-slots","link":"#使用-slots","children":[]}]},{"level":2,"title":"@property","slug":"property","link":"#property","children":[]}],"git":{"createdTime":1665229237000,"updatedTime":1665229237000,"contributors":[{"name":"梦里不知身是客","email":"tang97155@gmail.com","commits":1}]},"readingTime":{"minutes":7.33,"words":2200},"localizedDate":"2021年3月28日","filePathRelative":"ja/code/language/python/oop/property.md","excerpt":"<h2> 私有属性</h2>\\n<p>在 Class 内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p>\\n<p>但是，从前面 Student 类的定义来看，外部代码还是可以自由地修改一个实例的 <code>name</code>、<code>score</code> 属性:</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> bart <span class=\\"token operator\\">=</span> Student<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Bart Simpson'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">59</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> bart<span class=\\"token punctuation\\">.</span>score\\n<span class=\\"token number\\">59</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> bart<span class=\\"token punctuation\\">.</span>score <span class=\\"token operator\\">=</span> <span class=\\"token number\\">99</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> bart<span class=\\"token punctuation\\">.</span>score\\n<span class=\\"token number\\">99</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{t as data};
